package xiao

import (
	"github.com/OpenWhiteBox/AES/primitives/encoding"
	"github.com/OpenWhiteBox/AES/primitives/matrix"
	"github.com/OpenWhiteBox/AES/primitives/table"

	"github.com/OpenWhiteBox/AES/constructions/common"
	"github.com/OpenWhiteBox/AES/constructions/saes"
)

// StandardAES form of Xiao-Lai:
//
// func (constr Construction) Encrypt(dst, src []byte) {
// 	roundKeys := constr.StretchedKey()
// 	copy(dst, src)
//
// 	for i := 0; i <= 9; i++ {
// 		constr.ShiftRows(roundKeys[i])
// 	}
//
// 	for i := 0; i < 9; i++ {
// 		constr.ShiftRows(dst)
// 		constr.AddRoundKey(roundKeys[i], dst)
// 		constr.SubBytes(dst)
// 		constr.MixColumns(dst)
// 	}
//
// 	constr.ShiftRows(dst)
// 	constr.AddRoundKey(roundKeys[9], dst)
// 	constr.SubBytes(dst)
// 	constr.AddRoundKey(roundKeys[10], dst)
// }

// generateRoundMaterial creates the TMC (TBox + MixColumns) tables.
func generateRoundMaterial(rs *common.RandomSource, out *Construction, hidden func(int, int) table.DoubleToWord) {
	for round := 0; round < 10; round++ {
		for pos := 0; pos < 16; pos += 2 {
			inEnc := common.MixingBijection(rs, 16, round, pos/2)
			outEnc := common.MixingBijection(rs, 32, round, pos/4)

			inInv, _ := inEnc.Invert()
			outInv, _ := outEnc.Invert()

			out.TBoxMixCol[round][pos/2] = encoding.DoubleToWordTable{
				encoding.DoubleLinear{inEnc, inInv},
				encoding.WordLinear{outInv, outEnc},
				hidden(round, pos),
			}
		}
	}
}

// generateBarriers creates the encoding barriers between rounds that compute ShiftRows and re-encodes data.
func generateBarriers(rs *common.RandomSource, out *Construction, inputMask, outputMask, sr *matrix.Matrix) {
	// Generate the ShiftRows and re-encoding matrices.
	out.ShiftRows[0] = MaskSwap(rs, 16, 0).Compose(*sr).Compose(*inputMask)

	for round := 1; round < 10; round++ {
		out.ShiftRows[round] = MaskSwap(rs, 16, round).Compose(*sr).Compose(MaskSwap(rs, 32, round-1))
	}

	// We need to apply a final matrix transformation to convert the double-level encoding to a block-level one.
	out.FinalMask = outputMask.Compose(MaskSwap(rs, 32, 9))
}

// GenerateEncryptionKeys creates a white-boxed version of the AES key `key` for encryption, with any non-determinism
// generated by `seed`.
func GenerateEncryptionKeys(key, seed []byte, opts common.KeyGenerationOpts) (out Construction, inputMask, outputMask matrix.Matrix) {
	rs := common.NewRandomSource("Xiao Encryption", seed)

	constr := saes.Construction{key}
	roundKeys := constr.StretchedKey()

	// Apply ShiftRows to round keys 0 to 9.
	for k := 0; k < 10; k++ {
		constr.ShiftRows(roundKeys[k])
	}

	hidden := func(round, pos int) table.DoubleToWord {
		if round == 9 {
			return TBox{
				[2]table.Byte{
					common.TBox{constr, roundKeys[9][pos+0], roundKeys[10][pos+0]},
					common.TBox{constr, roundKeys[9][pos+1], roundKeys[10][pos+1]},
				},
				SideFromPos(pos),
			}
		} else {
			return TBoxMixCol{
				[2]table.Byte{
					common.TBox{constr, roundKeys[round][pos+0], 0x00},
					common.TBox{constr, roundKeys[round][pos+1], 0x00},
				},
				MixColumns,
				SideFromPos(pos),
			}
		}
	}

	common.GenerateMasks(&rs, opts, &inputMask, &outputMask)
	generateRoundMaterial(&rs, &out, hidden)
	generateBarriers(&rs, &out, &inputMask, &outputMask, &ShiftRows)

	return out, inputMask, outputMask
}

// GenerateDecryptionKeys creates a white-boxed version of the AES key `key` for decryption, with any non-determinism
// generated by `seed`.
func GenerateDecryptionKeys(key, seed []byte, opts common.KeyGenerationOpts) (out Construction, inputMask, outputMask matrix.Matrix) {
	rs := common.NewRandomSource("Xiao Decryption", seed)

	constr := saes.Construction{key}
	roundKeys := constr.StretchedKey()

	// Apply UnShiftRows to round keys 10.
	constr.UnShiftRows(roundKeys[10])

	hidden := func(round, pos int) table.DoubleToWord {
		if round == 0 {
			return TBoxMixCol{
				[2]table.Byte{
					common.InvTBox{constr, roundKeys[10][pos+0], roundKeys[9][pos+0]},
					common.InvTBox{constr, roundKeys[10][pos+1], roundKeys[9][pos+1]},
				},
				UnMixColumns,
				SideFromPos(pos),
			}
		} else if 0 < round && round < 9 {
			return TBoxMixCol{
				[2]table.Byte{
					common.InvTBox{constr, 0x00, roundKeys[9-round][pos+0]},
					common.InvTBox{constr, 0x00, roundKeys[9-round][pos+1]},
				},
				UnMixColumns,
				SideFromPos(pos),
			}
		} else {
			return TBox{
				[2]table.Byte{
					common.InvTBox{constr, 0x00, roundKeys[0][pos+0]},
					common.InvTBox{constr, 0x00, roundKeys[0][pos+1]},
				},
				SideFromPos(pos),
			}
		}
	}

	common.GenerateMasks(&rs, opts, &inputMask, &outputMask)
	generateRoundMaterial(&rs, &out, hidden)
	generateBarriers(&rs, &out, &inputMask, &outputMask, &UnShiftRows)

	return out, inputMask, outputMask
}
